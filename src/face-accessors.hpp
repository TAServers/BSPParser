#pragma once

#include "bsp.hpp"
#include "structs/geometry.hpp"
#include "structs/models.hpp"
#include <functional>

namespace BspParser::Accessors {
  struct Vertex {
    Structs::Vector position;
    Structs::Vector normal;
    Structs::Vector4 tangent;
    Structs::Vector2 uv;
  };

  void iterateModels(const Bsp& bsp, const std::function<void(const Structs::Model& model)>& iteratee);

  void iterateFaces(
    const Bsp& bsp,
    const Structs::Model& model,
    const std::function<void(
      const Structs::Face& face,
      const Structs::Plane& plane,
      const Structs::TexInfo& textureInfo,
      std::span<const int32_t> surfaceEdges
    )>& iteratee
  );

  /**
   * Calls iteratee once for each unique vertex in the face's edges.
   * Generates normals, tangents and UVs.
   * @param bsp
   * @param face Face to generate vertices for.
   * @param plane Plane referenced by the face.
   * @param textureInfo Texture info referenced by the face.
   * @param surfaceEdges Surface edges referenced by the face.
   * @param iteratee Function to call with each generated vertex.
   */
  void generateFaceVertices(
    const Bsp& bsp,
    const Structs::Face& face,
    const Structs::Plane& plane,
    const Structs::TexInfo& textureInfo,
    std::span<const int32_t> surfaceEdges,
    const std::function<void(const Vertex& vertex)>& iteratee
  );

  /**
   * Calls iteratee once for each triangle forming a mesh which triangulates the given face.
   * Indices start from 0 and index into the vertices generated by generateFaceVertices.
   * @param face Face to generate a triangle list for.
   * @param surfaceEdges Surface edges of the face to generate a triangle list for.
   * @param iteratee Called with each triplet of indices defining a triangle with clockwise winding.
   */
  void generateFaceTriangleList(
    const Structs::Face& face,
    std::span<const int32_t> surfaceEdges,
    const std::function<void(int32_t i0, int32_t i1, int32_t i2)>& iteratee
  );
}
