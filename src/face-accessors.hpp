#pragma once

#include "bsp.hpp"
#include "structs/geometry.hpp"
#include "structs/models.hpp"
#include <functional>

namespace BspParser::Accessors {
  struct Vertex {
    Structs::Vector position;
    Structs::Vector normal;
    Structs::Vector4 tangent;
    Structs::Vector2 uv;
  };

  void iterateModels(const Bsp& bsp, const std::function<void(const Structs::Model& model)>& iteratee);

  void iterateFaces(
    const Bsp& bsp, const Structs::Model& model, const std::function<void(const Structs::Face& face)>& iteratee
  );

  /**
   * Calls iteratee once for each unique vertex in the face's edges.
   * Generates normals, tangents and UVs.
   * @param bsp
   * @param face Face to generate vertices for.
   * @param iteratee Function to call with each generated vertex.
   */
  void generateFaceVertices(
    const Bsp& bsp, const Structs::Face& face, const std::function<void(const Vertex& vertex)>& iteratee
  );

  /**
   * Calls iteratee once for each index forming a triangle list which triangulates the given face.
   * Indices start from 0 and index into the vertices generated by generateFaceVertices.
   * @param bsp
   * @param face Face to generate a triangle list for.
   * @param iteratee Function to call with each generated index.
   */
  void generateFaceTriangleList(
    const Bsp& bsp, const Structs::Face& face, const std::function<void(int32_t index)>& iteratee
  );
}
