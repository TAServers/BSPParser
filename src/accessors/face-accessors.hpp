#pragma once

#include "../bsp.hpp"
#include "../structs/geometry.hpp"
#include "../structs/models.hpp"
#include "../vertex.hpp"
#include <functional>

namespace BspParser::Accessors {
  /**
   * Calls the provided function for each model in the BSP, passing a reference to the Structs::Model and its corresponding physics models.
   * @param bsp BSP instance.
   * @param iteratee Function to be called.
   */
  void iterateModels(
    const Bsp& bsp,
    const std::function<void(const Structs::Model& model, const std::vector<Bsp::PhysModel>& physicsModels)>& iteratee
  );

  /**
   * Calls the provided function for each face in the BSP's model,
   * passing a reference to the Structs::Face along with its corresponding Structs::Plane, Structs::TexInfo and surface edge indices.
   * @param bsp BSP instance.
   * @param model Model to iterate the faces of.
   * @param iteratee Function to be called.
   */
  void iterateFaces(
    const Bsp& bsp,
    const Structs::Model& model,
    const std::function<void(
      const Structs::Face& face,
      const Structs::Plane& plane,
      const Structs::TexInfo& textureInfo,
      std::span<const int32_t> surfaceEdges
    )>& iteratee
  );

  /**
   * Returns the number of vertices that will be generated by generateFaceVertices.
   * Useful for precomputing the size of vertex buffer needed to reduce allocations.
   * @param bsp BSP instance.
   * @param face Face to get the vertex count of.
   * @param surfaceEdges Surface edge indices of the face.
   * @return Number of vertices for the face.
   * @throws std::runtime_error Face cannot be triangulated (less than 3 edges).
   */
  size_t getVertexCount(const Bsp& bsp, const Structs::Face& face, std::span<const int32_t> surfaceEdges);

  /**
   * Returns the number of indices that will be generated by generateFaceTriangleList.
   * Useful for precomputing the size of index buffer needed to reduce allocations.
   * @param bsp BSP instance.
   * @param face Face to get the index count of.
   * @param surfaceEdges Surface edges of the face.
   * @return Number of indices for the face.
   * @throws std::runtime_error Face cannot be triangulated (less than 3 edges).
   */
  size_t getTriangleListIndexCount(const Bsp& bsp, const Structs::Face& face, std::span<const int32_t> surfaceEdges);

  /**
   * Calls iteratee once for each unique vertex in the face's edges or displacement.
   * Generates normals, tangents and UVs.
   * @param bsp BSP instance.
   * @param face Face to generate vertices for.
   * @param plane Plane referenced by the face.
   * @param textureInfo Texture info referenced by the face.
   * @param surfaceEdges Surface edge indices of the face.
   * @param iteratee Function to call with each generated vertex.
   * @throws std::runtime_error Face cannot be triangulated (less than 3 edges).
   */
  void generateVertices(
    const Bsp& bsp,
    const Structs::Face& face,
    const Structs::Plane& plane,
    const Structs::TexInfo& textureInfo,
    std::span<const int32_t> surfaceEdges,
    const std::function<void(const Vertex& vertex)>& iteratee
  );

  /**
   * Calls iteratee once for each triangle forming a mesh which triangulates the given face.
   * Indices start from 0 and index into the vertices generated by generateFaceVertices.
   * @param bsp BSP instance.
   * @param face Face to generate a triangle list for.
   * @param surfaceEdges Surface edge indices of the face.
   * @param iteratee Called with each triplet of indices defining a triangle with clockwise winding.
   * @throws std::runtime_error Face cannot be triangulated (less than 3 edges).
   */
  void generateTriangleListIndices(
    const Bsp& bsp,
    const Structs::Face& face,
    std::span<const int32_t> surfaceEdges,
    const std::function<void(uint32_t i0, uint32_t i1, uint32_t i2)>& iteratee
  );
}
